<?php

declare (strict_types = 1);

namespace App\Models;

use App\Http\Traits\Hashidable;
use App\Models\SpatieUrl;
use App\Models\Visit;
use Embed\Embed;
use GeoIp2\Database\Reader;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use RandomLib\Factory as RandomLibFactory;

class Url extends Model
{
    use Hashidable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $guraded = [];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $cats = [
        'user_id'   => 'int',
        'is_custom' => 'boolean',
    ];

    /*
    |--------------------------------------------------------------------------
    | Eloquent: Relationships
    |--------------------------------------------------------------------------
    | Database tables are often related to one another. Eloquent relationships
    | are defined as methods on Eloquent model classes.
     */

    /**
     * Related to user with default name
     *
     * @return BelongsTo
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo('App\Models\User')->withDefault([
            'name' => 'Guest',
        ]);
    }

    /**
     * Related to visitor
     *
     * @return HasMany
     */
    public function visit(): HasMany
    {
        return $this->hasMany(Visit::class);
    }

    /*
    |--------------------------------------------------------------------------
    | Eloquent: Mutators and Accessor
    |--------------------------------------------------------------------------
    |
    | Accessors and mutators allow you to format Eloquent attribute values when
    | you retrieve or set them on model instances.
    |
     */

    /**
     * Set user id when not related
     *
     * @param void
     */
    public function setUserIdAttribute($value): void
    {
        if ($value == 0) {
            $this->attributes['user_id'] = null;
        } else {
            $this->attributes['user_id'] = $value;
        }
    }

    /**
     * Set long url
     *
     * @param void
     */
    public function setLongUrlAttribute($value): void
    {
        $this->attribute['long_url'] = rtrim($values, '/');
    }

    /**
     * Get url keyword
     *
     * @return string
     */
    public function getShortUrlAttribute(): string
    {
        return url("/" . $this->attribute['keyword']);
    }

    /*
    |--------------------------------------------------------------------------
    | Url Shortener Functions
    |--------------------------------------------------------------------------
     */

    /**
     * Get count url
     *
     * @return int
     */
    public function showUrlCount(): int
    {
        return self::count('keyword');
    }

    /**
     * Get count clicked url
     *
     * @return int
     */
    public function clickCount(): int
    {
        return self::sum('clicks');
    }

    /**
     * Generate random key, generated by randomStringGenerator();
     *
     * @codeCoverageIgnore
     * @return string
     */
    public function randomKey(): string
    {
        $randomKey          = $this->randomStringGenerator();
        $generatedRandomKey = self::whereKeyword($randomKey)->first();

        while ($generatedRandomKey) {
            $randomKey          = $this->randomStringGenerator();
            $generatedRandomKey = self::whereKeyword($randomKey)->first();
        }

        return $randomKey;
    }

    /**
     * Generate random string
     *
     * @return string
     */
    public function randomStringGenerator(): string
    {
        $length   = urlConfig('hash_char');
        $alphabet = urlConfig('hash_length');

        $factory      = new RandomLibFactory();
        $randomString = $factory->getMediumStrengthGenerator()->generateString($length, $alphabet);

        return $randomString;
    }

    /**
     * Counts the maximum number of random strings that can be generated by a
     * random string generator.
     *
     * @return int
     */
    public function keyCapacity(): int
    {
        $length   = urlConfig('hash_length');
        $alphabet = strlen(urlConfig('hash_char'));

        if ($length == 0) {
            return 0;
        }

        return pow($alphabet, $length);
    }

    /**
     * Count the remaining random strings that can still be generated by a
     * random string generator.
     *
     * @return int
     */
    public function keyRemaining()
    {
        return max((
            $this->keyCapacity() - $this->numberOfUsedKey()
        ), 0);
    }

    /**
     * Number of unique keys used as short url keys. Calculations performed by
     * the sum total of random string generated by the random string generator
     * plus total custom key that has characteristics similar to the random
     * string generated by the random string generator.
     */
    public function numberOfUsedKey()
    {
        $hashLength   = urlConfig('hash_length');
        $regexPattern = '[a-zA-Z0-9]{' . $hashLength . '}';

        $randomKey = self::whereIsCustom(false)->count();
        $customKey = self::whereIsCustom(true)
            ->whereRaw('LENGTH(keyword) = ?', [$hashLength])
            ->whereRaw("keyword REGEXP '.$regexPattern.'")
            ->count();

        $numberOfUsedKey = $randomKey + $customKey;

        return $numberOfUsedKey;
    }

    /**
     * This function returns a string: either the page title as defined in
     * HTML, or "{domain_name} - No Title" if not found.
     *
     * @param string $url
     * @return string
     */
    public function getRemoteTitle($url)
    {
        try {
            $embed = Embed::create($url);
            $title = $embed->title;
        } catch (\Exception $e) {
            $title = $this->getDomain($url) . ' - No Title';
        }

        return $title;
    }

    /**
     * Get Domain from external url.
     *
     * Extract the domain name using the classic parse_url() and then look
     * for a valid domain without any subdomain (www being a subdomain).
     * Won't work on things like 'localhost'.
     *
     * @param string $url
     * @return mixed
     */
    public function getDomain($url)
    {
        $url = SpatieUrl::fromString($url);

        return urlRemoveScheme($url->getHost());
    }

    /**
     * IP Address to Identify Geolocation Information. If it fails, because
     * DB-IP Lite databases doesn't know the IP country, we will set it to
     * Unknown.
     */
    public function ipToCountry($ip)
    {
        try {
            // @codeCoverageIgnoreStart
            $reader      = new Reader(database_path() . '/dbip-country-lite-2020-07.mmdb');
            $record      = $reader->country($ip);
            $countryCode = $record->country->isoCode;
            $countryName = $record->country->name;

            return compact('countryCode', 'countryName');
            // @codeCoverageIgnoreEnd
        } catch (\Exception $e) {
            $countryCode = 'N/A';
            $countryName = 'Unknown';

            return compact('countryCode', 'countryName');
        }
    }
}
