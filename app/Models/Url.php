<?php

declare (strict_types = 1);

namespace App\Models;

use App\Http\Traits\Hashidable;
use Embed\Embed;
use GeoIp2\Database\Reader;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Support\Str;
use RandomLib\Factory as RandomLibFactory;
use Spatie\Url\Url as SpatieUrl;

class Url extends Model
{
    use Hashidable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $guarded = [];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $cats = [
        'user_id'   => 'int',
        'is_custom' => 'boolean',
    ];

    /*
    |--------------------------------------------------------------------------
    | Eloquent: Relationships
    |--------------------------------------------------------------------------
    | Database tables are often related to one another. Eloquent relationships
    | are defined as methods on Eloquent model classes.
     */

    /**
     * Related to user with default name
     *
     * @return BelongsTo
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class)->withDefault([
            'name' => 'Guest',
        ]);
    }

    /**
     * Related to visitor
     *
     * @return HasMany
     */
    public function visit(): HasMany
    {
        return $this->hasMany(Visit::class);
    }

    /*
    |--------------------------------------------------------------------------
    | Eloquent: Mutators and Accessor
    |--------------------------------------------------------------------------
    |
    | Accessors and mutators allow you to format Eloquent attribute values when
    | you retrieve or set them on model instances.
    |
     */

    /**
     * Set user id when not related
     *
     * @param void
     */
    public function setUserIdAttribute($value): void
    {
        if ($value == 0) {
            $this->attributes['user_id'] = null;
        } else {
            $this->attributes['user_id'] = $value;
        }
    }

    /**
     * Set long url
     *
     * @param void
     */
    public function setLongUrlAttribute($value): void
    {
        $this->attributes['long_url'] = rtrim($value, '/');
    }

    /**
     * Get url keyword
     *
     * @return string
     */
    public function getShortUrlAttribute(): string
    {
        return url("/" . $this->attributes['keyword']);
    }

    /*
    |--------------------------------------------------------------------------
    | Url Shortener Functions
    |--------------------------------------------------------------------------
     */

    /**
     * Key Capacity
     *
     * @return int
     */
    public function keyCapacity()
    {
        $alphabet = strlen(urlConfig('hash_char'));
        $length   = urlConfig('hash_length');

        if ($length == 0) {
            return 0;
        }

        return pow($alphabet, $length);
    }

    /**
     * Get count url
     *
     * @return int
     */
    public function shortUrlCount(): int
    {
        return (int) self::count('keyword');
    }

    /**
     * Get count clicked url
     *
     * @return int
     */
    public function clickCount(): int
    {
        return (int) self::sum('clicks');
    }

    /**
     * Generate random key, generated by randomStringGenerator();
     *
     * @codeCoverageIgnore
     * @return string
     */
    public function randomKey()
    {
        $randomKey          = $this->randomStringGenerator();
        $generatedRandomKey = self::whereKeyword($randomKey)->first();

        while ($generatedRandomKey) {
            $randomKey          = $this->randomStringGenerator();
            $generatedRandomKey = self::whereKeyword($randomKey)->first();
        }

        return $randomKey;
    }

    /**
     * Generate random string
     *
     * @return string
     */
    public function randomStringGenerator(): string
    {
        $alphabet = urlConfig('hash_char');
        $length   = urlConfig('hash_length');
        $factory  = new RandomLibFactory();

        return $factory->getMediumStrengthGenerator()->generateString($length, $alphabet);
    }

    /**
     * This function returns a string: either the page title as defined in
     * HTML, or "{domain_name} - No Title" if not found.
     *
     * @param string $url
     * @return string
     */
    public function getRemoteTitle($url): string
    {
        try {
            $embed = Embed::create($url);
            $title = $embed->title;
        } catch (\Exception $e) {
            $title = $this->getDomain($url) . ' - No Title';
        }

        return $title;
    }

    /**
     * Get Domain from external url.
     *
     * Extract the domain name using the classic parse_url() and then look
     * for a valid domain without any subdomain (www being a subdomain).
     * Won't work on things like 'localhost'.
     *
     * @param string $url
     * @return string
     */
    public function getDomain($url): string
    {
        $url = SpatieUrl::fromString($url);

        return urlRemoveScheme($url->getHost());
    }

    /**
     * IP Address to Identify Geolocation Information. If it fails, because
     * DB-IP Lite databases doesn't know the IP country, we will set it to
     * Unknown.
     *
     * @param  string $ip
     * @return array
     */
    public function ipToCountry($ip): array
    {
        try {
            // @codeCoverageIgnoreStart
            $reader      = new Reader(database_path() . '/dbip-country-lite-2020-07.mmdb');
            $record      = $reader->country($ip);
            $countryCode = $record->country->isoCode;
            $countryName = $record->country->name;

            return compact('countryCode', 'countryName');
            // @codeCoverageIgnoreEnd
        } catch (\Exception $e) {
            $countryCode = 'N/A';
            $countryName = 'Unknown';

            return compact('countryCode', 'countryName');
        }
    }
}
